#ifndef TEST_CALCULATOR_DATA_FOR_TESTS_HPP
#define TEST_CALCULATOR_DATA_FOR_TESTS_HPP

#include "./types_for_tests.hpp"


const TestNumberExtractingValid valid_strings_for_extracting_numbers[]{
        {"with number 12.52 and 12300", 12, "12.52"},
        {"with number 12.52 and 12300", 13, "2.52"},
        {"with number 12.52 and 12300", 15, "52"},
        {"with number 12.52 and 12300", 22, "12300"},
        {"111111111111111111111111111", 0,  "111111111111111111111111111"},
        {"891011121314151617181920212", 1,  "91011121314151617181920212"},
        {"12,22 + 56.78 - 85.45 / 85",  0,  "12,22"},
        {"12,22 + 56.78 - 85.45 / 85",  8,  "56.78"},
        {"12,22 + 56.78 - 85.45 / 85",  16, "85.45"},
        {"12,22 + 56.78 - 85.45/85",    16, "85.45"},
        {"12,22 + 56.78 - 85.45 / 85",  24, "85"},
        {"1fyhtyhty",                   0,  "1"},
        {"1",                           0,  "1"},
        {"aaa1",                        3,  "1"},
};

const TestNumberExtractingBase invalid_strings_for_extracting_numbers[]{
        {"with number 12.52 and 12300",   11},
        {"with number 12.52 and 12300",   17},
        {"with number 12.52 and 12300",   30},
        {"with number 12.52 and 12.30.0", 22},
        {"1.2.3.4",                       0},
        {"1.2.3.4",                       1},
        {"1.2.3.4",                       2},
        {"1.2.3.4",                       3},
        {"1.2+.35.5",                     4},
        {"1.2+.35.5",                     3},
        {"1.2+.35.5",                     3},
        {"1.2,6+.35.5",                   0},
};

const TestNumberConvertingValid valid_strings_for_converting_to_numbers[]{
        {"with number 12.52 and 12300", 12, 12.52},
        {"with number 12.52 and 12300", 13, 2.52},
        {"with number 12.52 and 12300", 15, 52},
        {"with number 12.52 and 12300", 22, 12300},
        {"1111",                        0,  1111},
        {"9101",                        0,  9101},
        {"12,22 + 56.78 - 85.45 / 85",  0,  12.22},
        {"12,22 + 56.78 - 85.45 / 85",  8,  56.78},
        {"12,22 + 56.78 - 85.45 / 85",  16, 85.45},
        {"12,22 + 56.78 - 85.45/85",    16, 85.45},
        {"12,22 + 56.78 - 85.45 / 85",  24, 85},
        {"1fyhtyhty",                   0,  1},
        {"1",                           0,  1},
        {"aaa1",                        3,  1},
};

const std::string correct_sequences_with_brackets[]{
        "(5 + 5)  + (5 + 5)",
        "((()))((()))<<<>>>{{{}}}[[[]]](test)",
        "{(((5 + 6 * 8) * 5 + [5 + 6]) * 8)(((40^2 + 1) - 5) / 5)}{{{5 + 5} + 5} + 5}[[[0] + 0 ] + 0 ](test())",
        "(5 + 5)+(6+6)+[(5 + 6 * 9) / ((7 * 2022))]",
        "({[<({[<>]})>]})",
        "(())(((((<>{}[])))))[[[]]]"
};

const std::string invalid_sequences_with_brackets[]{
        "(5 + 5)  + (5 + 5))",
        "((()))((()))<<<>>{{{}}}[[[]]](test)",
        "{(((5 + 6 * 8) * 5 + [5 + 6]) * 8)((40^2 + 1) - 5) / 5)}{{{5 + 5} + 5} + 5}[[[0] + 0 ] + 0 ](test())",
        "(5 + 5)+(6+6)+[(5 + 6 * 9) / ((7 * 2022})]",
        "({[<>({[<>]})>]})",
        "(())(((((<>{}[]))))[[[]]]"
};

const TestRemovingSpaces sentences_with_space_symbols[]{
        {"some string without spaces",                 "somestringwithoutspaces"},
        {"    some string without spaces",             "somestringwithoutspaces"},
        {"some string    without spaces",              "somestringwithoutspaces"},
        {"   some    string without    spaces    ",    "somestringwithoutspaces"},
        {"   1  + 2   + 3   +   4 + 5 + (((5) + 5 ))", "1+2+3+4+5+(((5)+5))"},
        {"1+2+3+4+5+(((5)+5))",                        "1+2+3+4+5+(((5)+5))"},
        {"1 +2+ 3+4+5 +(((5\n)+\t5))",                 "1+2+3+4+5+(((5)+5))"},
};

const TestCalculatorComputings tasks_pack_1[]{
        {"6 + 5 + 4 + 3 + 2 + 1",                                       21},
        {"6 + 5 + 4 + 3 + 2 * 2",                                       22},
        {"6 + 5 * 4 + 3 - 2 - 1",                                       26},
        {"6 - 5 - 4 - 3 - 2 - 1",                                       -9},
        {"-6 - 5 - 4 - 3 - 2 - 1",                                      -21},
        {"  -6 * 5 + 5 * 6",                                            0},
        {"  -6 * 5 + ((5 * 6))",                                        0},
        {"  -6 * (5 + 5) * 6",                                          -360},
        {"  -6 * (-5 + 5) * 6",                                         0},
        {"  -6 * (5 + 5) * 6",                                          -360},
        {"  -6 * ((5 + 5) * 6)",                                        -360},
        {"  (((-6 * (5 + 5))) * 6) + 0 + 0 + 0 + 0 - 0 - 1 + (-1) + 2", -360},
        {"2 + 2 * 2 + (4 * 6 / 2) * 3 + 1",                             43},
        {"2 + 2 * 2 + (4 * 6 / 2) * 3 + 1 - 43 - 5 / 5 * 2",            -2},
        {"  482 / (  31 - 29  )",                                       241},
        {"  480 / (  -31 - 29  )",                                      -8},
        {"  - 480 / (  -31 - 29  )",                                    8},
        {"(-5)",                                                        -5},
        {"-(-5)",                                                       5},
        {"-(-(-(-5)))",                                                 5},
        {"((((-5))))",                                                  -5},
};

const TestCalculatorComputings tasks_pack_2[]{
        {"50 * 60 * 70 * 80 * 90 / 90 / 80 / 70 / 60 / 50", 1},
        {"5 * 6 * 7 * 8 * 9 / 9 / 8 / 7 / 6 / 5 - 1",       0},
        {"1 - 5 * 6 * 7 * 8 * 9 / 9 / 8 / 7 / 6 / 5",       0},
        {"(1 - 5) * 6 * 7 * 8 * 9 / 9 / 8 / 7 / 6 / 4",     -1},
        {"2022 / ((2 * 2) / 4) / 2022",                     1}
};

const TestCalculatorComputings test_pack_3_with_history_of_my_calculator_app[]{
        {"86 / 4",                                21.5},
        {"86 / 12",                               86.0 / 12},
        {"100 / 4",                               25},
        {"118 / 4",                               29.5},
        {"187 / 4    ",                           46.75},
        {"81/13",                                 81.0 / 13},
        {"   25 / 6",                             25.0 / 6},
        {"8.40 + 3.60 + 1.80 + 2.50 + 5 + 1.8+9", 32.10},
        {"123.67 / (31 - 16)",                    123.67 / 15},
        {"25000/300",                             250.0 / 3},
        {"393.92 / (31 - 11)",                    19.696},
        {"0.72 - 0.67",                           0.72 - 0.67},
        {"478.73 / (31 - 8)",                     478.73 / 23},
        {"2000 / 13000",                          2.0 / 13},
        {"10 - 2",                                8},
        {"36+10+16+14+12",                        88},
        {"200000 / 2000",                         100},
        {"128 / 4",                               32},
        {"2520 * 6",                              15120},
        {"10.32 + 2.19",                          12.51}
};

const TestCalculatorComputings test_pack_4_complex[]{
        {"[[5 + 5] + 6] * (5 * [(52) + 52])",                   8320},
        {"[[5 + 5] + 6] * (5 * [(-52) + 52])",                  0},
        {"[[5 + 5] + 6] * (5 * [52 + (52)])",                   8320},
        {"[[5 + 5] + 6] * (5 * [52 + (-52)])",                  0},
        {"[[5 + 5] + 6] * (5 * [52 + 52])",                     8320},
        {"[[5 + 5] + 6] * (5 * [52 - 52])",                     0},
        {"[[5 + 5] + 6] * (5 * [-52 - 52])",                    -8320},
        {"([52 + ( -6 * 9 / 3 ) - 9] / 5) + 0",                 5},
        {"([52 + ( -6 * 9 / 3 ) - 9] / 5) - 0 / 5 - 5 - 10000", -10000},
        {"([52 + ( -60 * 9 / 3 ) - 9] / 5) + 0",                -27.4}
};

const TestCalculatorComputings test_pack_5[]{
        {"8568 + 747 * 5755 * 5 - 24478", 21479015},
        {"8568 + 747 * 5755 * 5 - 24478", 21479015},
        {"(8568 + 747) * 5755 * (5 - 24478)", -1311944301225},
        {"-(8568 + 747) * 5755 * (5 - 24478)", 1311944301225},
        {"(([121 / 11] + (121 / 11)) * 22) * 484 / 8 + (52 * (-2022)) + 0 - 0 / 6", -75862},
        {" 58484488444844   ", 58484488444844},
        {" -58484488444844   ", -58484488444844},
        {" (-(3*5) * (125*2 / 25*3 + 6))   ", -540},
};


#endif //TEST_CALCULATOR_DATA_FOR_TESTS_HPP
